-- =====================================================
-- VERTICA COMPLETE SCHEMA DUMP
-- =====================================================
-- Place your complete Vertica database schema here
-- You can generate this using vsql or your preferred Vertica tool
-- 
-- Example command to generate schema dump:
-- vsql -h your-vertica-host -U username -d database_name -c "\d+" > full-schema.sql
-- or
-- vsql -h your-vertica-host -U username -d database_name -f export_schema.sql > full-schema.sql
--
-- This file should contain:
-- 1. All table definitions (CREATE TABLE statements)
-- 2. All indexes (CREATE INDEX statements)  
-- 3. All constraints (ALTER TABLE ... ADD CONSTRAINT statements)
-- 4. All views (CREATE VIEW statements)
-- 5. All sequences/identity definitions
-- 6. All foreign key relationships
-- =====================================================

-- PASTE YOUR COMPLETE VERTICA SCHEMA BELOW THIS LINE
-- =====================================================

-- DPWTANBEEH.COLLECTIONS definition

CREATE TABLE DPWTANBEEH.COLLECTIONS
(
    COLLECTION_ID int NOT NULL,
    CODE varchar(255) NOT NULL,
    NAME varchar(255) NOT NULL,
    DESCRIPTION varchar(255),
    SORT_ORDER int NOT NULL DEFAULT 0,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_COLLECTIONS PRIMARY KEY (COLLECTION_ID) DISABLED,
    CONSTRAINT UK_COLLECTIONS_01 UNIQUE (CODE) DISABLED,
    CONSTRAINT CHK_COLLECTIONS_01 CHECK ((COLLECTIONS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.COLLECTIONS /*+createtype(L)*/ 
(
 COLLECTION_ID,
 CODE,
 NAME,
 DESCRIPTION,
 SORT_ORDER,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT COLLECTIONS.COLLECTION_ID,
        COLLECTIONS.CODE,
        COLLECTIONS.NAME,
        COLLECTIONS.DESCRIPTION,
        COLLECTIONS.SORT_ORDER,
        COLLECTIONS.IS_VALID,
        COLLECTIONS.BIZ_CODE,
        COLLECTIONS.RGN_CODE,
        COLLECTIONS.SRC_SYS,
        COLLECTIONS.CREATED_BY,
        COLLECTIONS.CREATED_DATE,
        COLLECTIONS.MODIFIED_BY,
        COLLECTIONS.MODIFIED_DATE
 FROM DPWTANBEEH.COLLECTIONS
 ORDER BY COLLECTIONS.COLLECTION_ID
SEGMENTED BY hash(COLLECTIONS.COLLECTION_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MESSAGES definition

CREATE TABLE DPWTANBEEH.MESSAGES
(
    MESSAGE_ID int NOT NULL,
    CAMERA_CODE varchar(30) NOT NULL,
    MODULE_CODE varchar(30) NOT NULL,
    REF_ID varchar(255),
    MEDIA_NAME varchar(255),
    RECEIVED_TIME timestamp NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_MESSAGES PRIMARY KEY (MESSAGE_ID) DISABLED,
    CONSTRAINT CHK_MESSAGES_01 CHECK ((MESSAGES.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.MESSAGES /*+createtype(L)*/ 
(
 MESSAGE_ID,
 CAMERA_CODE,
 MODULE_CODE,
 REF_ID,
 MEDIA_NAME,
 RECEIVED_TIME,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT MESSAGES.MESSAGE_ID,
        MESSAGES.CAMERA_CODE,
        MESSAGES.MODULE_CODE,
        MESSAGES.REF_ID,
        MESSAGES.MEDIA_NAME,
        MESSAGES.RECEIVED_TIME,
        MESSAGES.IS_VALID,
        MESSAGES.BIZ_CODE,
        MESSAGES.RGN_CODE,
        MESSAGES.SRC_SYS,
        MESSAGES.CREATED_BY,
        MESSAGES.CREATED_DATE,
        MESSAGES.MODIFIED_BY,
        MESSAGES.MODIFIED_DATE
 FROM DPWTANBEEH.MESSAGES
 ORDER BY MESSAGES.MESSAGE_ID
SEGMENTED BY hash(MESSAGES.MESSAGE_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MODULES definition

CREATE TABLE DPWTANBEEH.MODULES
(
    MOD_REC_ID int NOT NULL,
    SHORT_CODE varchar(30) NOT NULL,
    --SERVICE_ID varchar(30) NOT NULL,
    NAME varchar(30) NOT NULL,
    DESCRIPTION varchar(255),
    TRITON_MODEL_NAME varchar(255),
    END_POINT_HTTP_URL varchar(255),
    END_POINT_GRPC_URL varchar(255),
    MAX_QUEUE_SIZE int NOT NULL DEFAULT 0,
    MAX_BATCH_SIZE int NOT NULL DEFAULT 0,
    SORT_ORDER int NOT NULL DEFAULT 0,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    END_POINT_NAME varchar(255) NOT NULL,
    CONSTRAINT PK_MODULES PRIMARY KEY (MOD_REC_ID) DISABLED,
    CONSTRAINT UK_MODULES_01 UNIQUE (SHORT_CODE) DISABLED,
    CONSTRAINT UK_MODULES_02 UNIQUE (SERVICE_ID) DISABLED,
    CONSTRAINT CHK_MODULES_01 CHECK ((MODULES.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.MODULES /*+createtype(L)*/ 
(
 MOD_REC_ID,
 SHORT_CODE,
 SERVICE_ID,
 NAME,
 DESCRIPTION,
 TRITON_MODEL_NAME,
 END_POINT_HTTP_URL,
 END_POINT_GRPC_URL,
 MAX_QUEUE_SIZE,
 MAX_BATCH_SIZE,
 SORT_ORDER,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE,
 END_POINT_NAME
)
AS
 SELECT MODULES.MOD_REC_ID,
        MODULES.SHORT_CODE,
        MODULES.SERVICE_ID,
        MODULES.NAME,
        MODULES.DESCRIPTION,
        MODULES.TRITON_MODEL_NAME,
        MODULES.END_POINT_HTTP_URL,
        MODULES.END_POINT_GRPC_URL,
        MODULES.MAX_QUEUE_SIZE,
        MODULES.MAX_BATCH_SIZE,
        MODULES.SORT_ORDER,
        MODULES.IS_VALID,
        MODULES.BIZ_CODE,
        MODULES.RGN_CODE,
        MODULES.SRC_SYS,
        MODULES.CREATED_BY,
        MODULES.CREATED_DATE,
        MODULES.MODIFIED_BY,
        MODULES.MODIFIED_DATE,
        MODULES.END_POINT_NAME
 FROM DPWTANBEEH.MODULES
 ORDER BY MODULES.MOD_REC_ID
SEGMENTED BY hash(MODULES.MOD_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.ROLES definition

CREATE TABLE DPWTANBEEH.ROLES
(
    ROLE_REC_ID int NOT NULL,
    NAME varchar(30) NOT NULL,
    DESCRIPTION varchar(255),
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_ROLES PRIMARY KEY (ROLE_REC_ID) DISABLED,
    CONSTRAINT UK_ROLE_NAME UNIQUE (NAME) DISABLED,
    CONSTRAINT CHK_ROLES_01 CHECK ((ROLES.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.ROLES /*+createtype(L)*/ 
(
 ROLE_REC_ID,
 NAME,
 DESCRIPTION,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT ROLES.ROLE_REC_ID,
        ROLES.NAME,
        ROLES.DESCRIPTION,
        ROLES.IS_VALID,
        ROLES.BIZ_CODE,
        ROLES.RGN_CODE,
        ROLES.SRC_SYS,
        ROLES.CREATED_BY,
        ROLES.CREATED_DATE,
        ROLES.MODIFIED_BY,
        ROLES.MODIFIED_DATE
 FROM DPWTANBEEH.ROLES
 ORDER BY ROLES.ROLE_REC_ID
SEGMENTED BY hash(ROLES.ROLE_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.ROLES_CAMERA_MAP definition

CREATE TABLE DPWTANBEEH.ROLES_CAMERA_MAP
(
    ROLE_REC_ID int NOT NULL,
    CAM_REC_ID int NOT NULL,
    CONSTRAINT PK_ROLE_CAMERA_MAP PRIMARY KEY (ROLE_REC_ID, CAM_REC_ID) DISABLED
);


CREATE PROJECTION DPWTANBEEH.ROLES_CAMERA_MAP /*+createtype(L)*/ 
(
 ROLE_REC_ID,
 CAM_REC_ID
)
AS
 SELECT ROLES_CAMERA_MAP.ROLE_REC_ID,
        ROLES_CAMERA_MAP.CAM_REC_ID
 FROM DPWTANBEEH.ROLES_CAMERA_MAP
 ORDER BY ROLES_CAMERA_MAP.ROLE_REC_ID,
          ROLES_CAMERA_MAP.CAM_REC_ID
SEGMENTED BY hash(ROLES_CAMERA_MAP.ROLE_REC_ID, ROLES_CAMERA_MAP.CAM_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.ROLE_MENU_CONFIG_MAP definition

CREATE TABLE DPWTANBEEH.ROLE_MENU_CONFIG_MAP
(
    ROLE_ID int NOT NULL,
    MENU_ID int NOT NULL,
    CONSTRAINT PK_ROLE_MENU_CONFIG_MAP PRIMARY KEY (ROLE_ID, MENU_ID) DISABLED
);


CREATE PROJECTION DPWTANBEEH.ROLE_MENU_CONFIG_MAP /*+createtype(L)*/ 
(
 ROLE_ID,
 MENU_ID
)
AS
 SELECT ROLE_MENU_CONFIG_MAP.ROLE_ID,
        ROLE_MENU_CONFIG_MAP.MENU_ID
 FROM DPWTANBEEH.ROLE_MENU_CONFIG_MAP
 ORDER BY ROLE_MENU_CONFIG_MAP.ROLE_ID,
          ROLE_MENU_CONFIG_MAP.MENU_ID
SEGMENTED BY hash(ROLE_MENU_CONFIG_MAP.ROLE_ID, ROLE_MENU_CONFIG_MAP.MENU_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.STREAMING_USERS definition

CREATE TABLE DPWTANBEEH.STREAMING_USERS
(
    ST_REC_ID int NOT NULL,
    USER_CODE varchar(100) NOT NULL,
    IS_STREAMING int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CAM_ID varchar(30),
    CONSTRAINT PK_STREAMING_USER PRIMARY KEY (ST_REC_ID) DISABLED,
    CONSTRAINT CHK_TNB_STRACC_01 CHECK ((STREAMING_USERS.IS_STREAMING = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.STREAMING_USERS /*+createtype(L)*/ 
(
 ST_REC_ID,
 USER_CODE,
 IS_STREAMING,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE,
 CAM_ID
)
AS
 SELECT STREAMING_USERS.ST_REC_ID,
        STREAMING_USERS.USER_CODE,
        STREAMING_USERS.IS_STREAMING,
        STREAMING_USERS.BIZ_CODE,
        STREAMING_USERS.RGN_CODE,
        STREAMING_USERS.SRC_SYS,
        STREAMING_USERS.CREATED_BY,
        STREAMING_USERS.CREATED_DATE,
        STREAMING_USERS.MODIFIED_BY,
        STREAMING_USERS.MODIFIED_DATE,
        STREAMING_USERS.CAM_ID
 FROM DPWTANBEEH.STREAMING_USERS
 ORDER BY STREAMING_USERS.ST_REC_ID
SEGMENTED BY hash(STREAMING_USERS.ST_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.TNB_AUDIT_TRAILS definition

CREATE TABLE DPWTANBEEH.TNB_AUDIT_TRAILS
(
    TAT_REC_ID int NOT NULL,
    TAT_GROUP_ID int NOT NULL,
    TAT_MODULE varchar(50) NOT NULL,
    TAT_FUNCTION varchar(50) NOT NULL,
    TAT_TABLE varchar(50) NOT NULL,
    TAT_TABLE_PKEY1 int NOT NULL,
    TAT_DML_TYPE varchar(10) NOT NULL,
    TAT_FIELD varchar(50) NOT NULL,
    TAT_OLD_VAL varchar(500),
    TAT_NEW_VAL varchar(500),
    TAT_AUDIT_REMARKS varchar(500) NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_TNB_AUDIT_TRAILS PRIMARY KEY (TAT_REC_ID) DISABLED,
    CONSTRAINT CHK_TNB_AUDIT_TRAILS_01 CHECK ((TNB_AUDIT_TRAILS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.TNB_AUDIT_TRAILS /*+createtype(L)*/ 
(
 TAT_REC_ID,
 TAT_GROUP_ID,
 TAT_MODULE,
 TAT_FUNCTION,
 TAT_TABLE,
 TAT_TABLE_PKEY1,
 TAT_DML_TYPE,
 TAT_FIELD,
 TAT_OLD_VAL,
 TAT_NEW_VAL,
 TAT_AUDIT_REMARKS,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT TNB_AUDIT_TRAILS.TAT_REC_ID,
        TNB_AUDIT_TRAILS.TAT_GROUP_ID,
        TNB_AUDIT_TRAILS.TAT_MODULE,
        TNB_AUDIT_TRAILS.TAT_FUNCTION,
        TNB_AUDIT_TRAILS.TAT_TABLE,
        TNB_AUDIT_TRAILS.TAT_TABLE_PKEY1,
        TNB_AUDIT_TRAILS.TAT_DML_TYPE,
        TNB_AUDIT_TRAILS.TAT_FIELD,
        TNB_AUDIT_TRAILS.TAT_OLD_VAL,
        TNB_AUDIT_TRAILS.TAT_NEW_VAL,
        TNB_AUDIT_TRAILS.TAT_AUDIT_REMARKS,
        TNB_AUDIT_TRAILS.IS_VALID,
        TNB_AUDIT_TRAILS.BIZ_CODE,
        TNB_AUDIT_TRAILS.RGN_CODE,
        TNB_AUDIT_TRAILS.SRC_SYS,
        TNB_AUDIT_TRAILS.CREATED_BY,
        TNB_AUDIT_TRAILS.CREATED_DATE,
        TNB_AUDIT_TRAILS.MODIFIED_BY,
        TNB_AUDIT_TRAILS.MODIFIED_DATE
 FROM DPWTANBEEH.TNB_AUDIT_TRAILS
 ORDER BY TNB_AUDIT_TRAILS.TAT_REC_ID
SEGMENTED BY hash(TNB_AUDIT_TRAILS.TAT_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.TNB_REFDATA definition

CREATE TABLE DPWTANBEEH.TNB_REFDATA
(
    RD_REC_ID int NOT NULL,
    RD_TYPE varchar(50) NOT NULL,
    RD_CODE varchar(30) NOT NULL,
    RD_DESC1 varchar(200) NOT NULL,
    RD_DESC2 varchar(500),
    RD_CATG varchar(50),
    RD_REMARKS varchar(2000),
    VALID_FROM date NOT NULL,
    VALID_TO date NOT NULL,
    SORT_ORDER int NOT NULL DEFAULT 0,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_TNB_REFDATA PRIMARY KEY (RD_REC_ID) DISABLED,
    CONSTRAINT UK_TNB_REFDATA_01 UNIQUE (RD_TYPE, RD_CODE) DISABLED,
    CONSTRAINT CHK_TNB_REFDATA_01 CHECK ((TNB_REFDATA.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.TNB_REFDATA /*+createtype(L)*/ 
(
 RD_REC_ID,
 RD_TYPE,
 RD_CODE,
 RD_DESC1,
 RD_DESC2,
 RD_CATG,
 RD_REMARKS,
 VALID_FROM,
 VALID_TO,
 SORT_ORDER,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT TNB_REFDATA.RD_REC_ID,
        TNB_REFDATA.RD_TYPE,
        TNB_REFDATA.RD_CODE,
        TNB_REFDATA.RD_DESC1,
        TNB_REFDATA.RD_DESC2,
        TNB_REFDATA.RD_CATG,
        TNB_REFDATA.RD_REMARKS,
        TNB_REFDATA.VALID_FROM,
        TNB_REFDATA.VALID_TO,
        TNB_REFDATA.SORT_ORDER,
        TNB_REFDATA.IS_VALID,
        TNB_REFDATA.BIZ_CODE,
        TNB_REFDATA.RGN_CODE,
        TNB_REFDATA.SRC_SYS,
        TNB_REFDATA.CREATED_BY,
        TNB_REFDATA.CREATED_DATE,
        TNB_REFDATA.MODIFIED_BY,
        TNB_REFDATA.MODIFIED_DATE
 FROM DPWTANBEEH.TNB_REFDATA
 ORDER BY TNB_REFDATA.RD_REC_ID
SEGMENTED BY hash(TNB_REFDATA.RD_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.USER_ACCESS definition

CREATE TABLE DPWTANBEEH.USER_ACCESS
(
    US_REC_ID int NOT NULL,
    USER_TYPE varchar(50) NOT NULL,
    USER_CODE varchar(100) NOT NULL,
    USER_DESC varchar(200),
    USER_REMARKS varchar(2000),
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_USER_ACCESS PRIMARY KEY (US_REC_ID) DISABLED,
    CONSTRAINT UK_TNB_USRACC_01 UNIQUE (USER_TYPE, USER_CODE) DISABLED,
    CONSTRAINT CHK_TNB_USRACC_01 CHECK ((USER_ACCESS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


CREATE PROJECTION DPWTANBEEH.USER_ACCESS /*+createtype(L)*/ 
(
 US_REC_ID,
 USER_TYPE,
 USER_CODE,
 USER_DESC,
 USER_REMARKS,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT USER_ACCESS.US_REC_ID,
        USER_ACCESS.USER_TYPE,
        USER_ACCESS.USER_CODE,
        USER_ACCESS.USER_DESC,
        USER_ACCESS.USER_REMARKS,
        USER_ACCESS.IS_VALID,
        USER_ACCESS.BIZ_CODE,
        USER_ACCESS.RGN_CODE,
        USER_ACCESS.SRC_SYS,
        USER_ACCESS.CREATED_BY,
        USER_ACCESS.CREATED_DATE,
        USER_ACCESS.MODIFIED_BY,
        USER_ACCESS.MODIFIED_DATE
 FROM DPWTANBEEH.USER_ACCESS
 ORDER BY USER_ACCESS.US_REC_ID
SEGMENTED BY hash(USER_ACCESS.US_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.USER_ROLE_MAP definition

CREATE TABLE DPWTANBEEH.USER_ROLE_MAP
(
    USER_ID int NOT NULL,
    ROLE_ID int NOT NULL,
    CONSTRAINT PK_USER_ROLE_MAP PRIMARY KEY (USER_ID, ROLE_ID) DISABLED
);


CREATE PROJECTION DPWTANBEEH.USER_ROLE_MAP /*+createtype(L)*/ 
(
 USER_ID,
 ROLE_ID
)
AS
 SELECT USER_ROLE_MAP.USER_ID,
        USER_ROLE_MAP.ROLE_ID
 FROM DPWTANBEEH.USER_ROLE_MAP
 ORDER BY USER_ROLE_MAP.USER_ID,
          USER_ROLE_MAP.ROLE_ID
SEGMENTED BY hash(USER_ROLE_MAP.USER_ID, USER_ROLE_MAP.ROLE_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.CATEGORY definition

CREATE TABLE DPWTANBEEH.CATEGORY
(
    CATEGORY_ID int NOT NULL,
    SHORT_CODE varchar(30) NOT NULL,
    NAME varchar(30) NOT NULL,
    DESCRIPTION varchar(255),
    SORT_ORDER int NOT NULL DEFAULT 0,
    PARENT_ID int,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_CATEGORY PRIMARY KEY (CATEGORY_ID) DISABLED,
    CONSTRAINT UK_CATEGORY_01 UNIQUE (SHORT_CODE) DISABLED,
    CONSTRAINT CHK_CATEGORY_01 CHECK ((CATEGORY.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.CATEGORY ADD CONSTRAINT FK_CATEGORY_01 FOREIGN KEY (PARENT_ID) references DPWTANBEEH.CATEGORY (CATEGORY_ID);

CREATE PROJECTION DPWTANBEEH.CATEGORY /*+createtype(L)*/ 
(
 CATEGORY_ID,
 SHORT_CODE,
 NAME,
 DESCRIPTION,
 SORT_ORDER,
 PARENT_ID,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT CATEGORY.CATEGORY_ID,
        CATEGORY.SHORT_CODE,
        CATEGORY.NAME,
        CATEGORY.DESCRIPTION,
        CATEGORY.SORT_ORDER,
        CATEGORY.PARENT_ID,
        CATEGORY.IS_VALID,
        CATEGORY.BIZ_CODE,
        CATEGORY.RGN_CODE,
        CATEGORY.SRC_SYS,
        CATEGORY.CREATED_BY,
        CATEGORY.CREATED_DATE,
        CATEGORY.MODIFIED_BY,
        CATEGORY.MODIFIED_DATE
 FROM DPWTANBEEH.CATEGORY
 ORDER BY CATEGORY.PARENT_ID,
          CATEGORY.CATEGORY_ID
SEGMENTED BY hash(CATEGORY.CATEGORY_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.FACES_DETAILS definition

CREATE TABLE DPWTANBEEH.FACES_DETAILS
(
    DETAIL_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    SEQ_NO int,
    REF_ID varchar(255),
    PERSON_NAME varchar(255),
    DETECTION_ACCURACY numeric(10,10),
    IDENTIFICATION_ACCURACY numeric(10,10),
    REF_IMG varchar(255),
    IS_VALID int NOT NULL DEFAULT 1,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_FACES_DETAILS PRIMARY KEY (DETAIL_ID) DISABLED,
    CONSTRAINT CHK_FACES_DETAILS_01 CHECK ((FACES_DETAILS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.FACES_DETAILS ADD CONSTRAINT FK_FACES_DETAILS_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);

CREATE PROJECTION DPWTANBEEH.FACES_DETAILS /*+createtype(L)*/ 
(
 DETAIL_ID,
 MESSAGE_ID,
 SEQ_NO,
 REF_ID,
 PERSON_NAME,
 DETECTION_ACCURACY,
 IDENTIFICATION_ACCURACY,
 REF_IMG,
 IS_VALID,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT FACES_DETAILS.DETAIL_ID,
        FACES_DETAILS.MESSAGE_ID,
        FACES_DETAILS.SEQ_NO,
        FACES_DETAILS.REF_ID,
        FACES_DETAILS.PERSON_NAME,
        FACES_DETAILS.DETECTION_ACCURACY,
        FACES_DETAILS.IDENTIFICATION_ACCURACY,
        FACES_DETAILS.REF_IMG,
        FACES_DETAILS.IS_VALID,
        FACES_DETAILS.CREATED_BY,
        FACES_DETAILS.CREATED_DATE,
        FACES_DETAILS.MODIFIED_BY,
        FACES_DETAILS.MODIFIED_DATE
 FROM DPWTANBEEH.FACES_DETAILS
 ORDER BY FACES_DETAILS.MESSAGE_ID,
          FACES_DETAILS.DETAIL_ID
SEGMENTED BY hash(FACES_DETAILS.DETAIL_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.FACES_DETAILS_IDX1 definition

CREATE TEXT INDEX DPWTANBEEH.FACES_DETAILS_IDX1 ON DPWTANBEEH.FACES_DETAILS ( DETAIL_ID, REF_ID) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.FACES_DETAILS_IDX2 definition

CREATE TEXT INDEX DPWTANBEEH.FACES_DETAILS_IDX2 ON DPWTANBEEH.FACES_DETAILS ( DETAIL_ID, PERSON_NAME) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.INCIDENCE_DETAILS definition

CREATE TABLE DPWTANBEEH.INCIDENCE_DETAILS
(
    DETAIL_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    INCIDENCE_TYPE varchar(30) NOT NULL,
    SEVERITY varchar(30) NOT NULL,
    ACCURACY numeric(10,10),
    DESCRIPTION varchar(255),
    META_INFO varchar(80),
    IS_VALID int NOT NULL DEFAULT 1,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_INCIDENCE_DETAILS PRIMARY KEY (DETAIL_ID) DISABLED,
    CONSTRAINT CHK_INCIDENCE_DETAILS_01 CHECK ((INCIDENCE_DETAILS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.INCIDENCE_DETAILS ADD CONSTRAINT FK_INCIDENCE_DETAILS_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);

CREATE PROJECTION DPWTANBEEH.INCIDENCE_DETAILS /*+createtype(L)*/ 
(
 DETAIL_ID,
 MESSAGE_ID,
 INCIDENCE_TYPE,
 SEVERITY,
 ACCURACY,
 DESCRIPTION,
 META_INFO,
 IS_VALID,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT INCIDENCE_DETAILS.DETAIL_ID,
        INCIDENCE_DETAILS.MESSAGE_ID,
        INCIDENCE_DETAILS.INCIDENCE_TYPE,
        INCIDENCE_DETAILS.SEVERITY,
        INCIDENCE_DETAILS.ACCURACY,
        INCIDENCE_DETAILS.DESCRIPTION,
        INCIDENCE_DETAILS.META_INFO,
        INCIDENCE_DETAILS.IS_VALID,
        INCIDENCE_DETAILS.CREATED_BY,
        INCIDENCE_DETAILS.CREATED_DATE,
        INCIDENCE_DETAILS.MODIFIED_BY,
        INCIDENCE_DETAILS.MODIFIED_DATE
 FROM DPWTANBEEH.INCIDENCE_DETAILS
 ORDER BY INCIDENCE_DETAILS.MESSAGE_ID,
          INCIDENCE_DETAILS.DETAIL_ID
SEGMENTED BY hash(INCIDENCE_DETAILS.DETAIL_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.INCIDENCE_DETAILS_IDX1 definition

CREATE TEXT INDEX DPWTANBEEH.INCIDENCE_DETAILS_IDX1 ON DPWTANBEEH.INCIDENCE_DETAILS ( DETAIL_ID, INCIDENCE_TYPE) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.INCIDENCE_DETAILS_IDX2 definition

CREATE TEXT INDEX DPWTANBEEH.INCIDENCE_DETAILS_IDX2 ON DPWTANBEEH.INCIDENCE_DETAILS ( DETAIL_ID, SEVERITY) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MENU_CONFIG definition

CREATE TABLE DPWTANBEEH.MENU_CONFIG
(
    MENU_REC_ID int NOT NULL,
    MODULE_ID int NOT NULL,
    DISPLAY_SEQ int NOT NULL,
    TREE_LEVEL int NOT NULL,
    MENU_CODE varchar(20) NOT NULL,
    MENU_NAME varchar(150) NOT NULL,
    OU_ID int NOT NULL,
    PERENT_MENU_CODE varchar(20),
    SERVER_INST_ID int,
    SERVER_INST_LOCATION varchar(150),
    SERVER_INST_NAME varchar(150) NOT NULL,
    SERVER_OPERATION varchar(150),
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_MENU_CONFIG PRIMARY KEY (MENU_REC_ID) DISABLED,
    CONSTRAINT CHK_MENU_CONFIG_01 CHECK ((MENU_CONFIG.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.MENU_CONFIG ADD CONSTRAINT FK_MENU_CONFIG_MODULE_ID FOREIGN KEY (MODULE_ID) references DPWTANBEEH.MODULES (MOD_REC_ID);

CREATE PROJECTION DPWTANBEEH.MENU_CONFIG /*+createtype(L)*/ 
(
 MENU_REC_ID,
 MODULE_ID,
 DISPLAY_SEQ,
 TREE_LEVEL,
 MENU_CODE,
 MENU_NAME,
 OU_ID,
 PERENT_MENU_CODE,
 SERVER_INST_ID,
 SERVER_INST_LOCATION,
 SERVER_INST_NAME,
 SERVER_OPERATION,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT MENU_CONFIG.MENU_REC_ID,
        MENU_CONFIG.MODULE_ID,
        MENU_CONFIG.DISPLAY_SEQ,
        MENU_CONFIG.TREE_LEVEL,
        MENU_CONFIG.MENU_CODE,
        MENU_CONFIG.MENU_NAME,
        MENU_CONFIG.OU_ID,
        MENU_CONFIG.PERENT_MENU_CODE,
        MENU_CONFIG.SERVER_INST_ID,
        MENU_CONFIG.SERVER_INST_LOCATION,
        MENU_CONFIG.SERVER_INST_NAME,
        MENU_CONFIG.SERVER_OPERATION,
        MENU_CONFIG.IS_VALID,
        MENU_CONFIG.BIZ_CODE,
        MENU_CONFIG.RGN_CODE,
        MENU_CONFIG.SRC_SYS,
        MENU_CONFIG.CREATED_BY,
        MENU_CONFIG.CREATED_DATE,
        MENU_CONFIG.MODIFIED_BY,
        MENU_CONFIG.MODIFIED_DATE
 FROM DPWTANBEEH.MENU_CONFIG
 ORDER BY MENU_CONFIG.MODULE_ID,
          MENU_CONFIG.MENU_REC_ID
SEGMENTED BY hash(MENU_CONFIG.MENU_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MESSAGES_IDX1 definition

CREATE TEXT INDEX DPWTANBEEH.MESSAGES_IDX1 ON DPWTANBEEH.MESSAGES ( MESSAGE_ID, CAMERA_CODE) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MESSAGES_IDX2 definition

CREATE TEXT INDEX DPWTANBEEH.MESSAGES_IDX2 ON DPWTANBEEH.MESSAGES ( MESSAGE_ID, MODULE_CODE) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.MESSAGES_IDX3 definition

CREATE TEXT INDEX DPWTANBEEH.MESSAGES_IDX3 ON DPWTANBEEH.MESSAGES ( MESSAGE_ID, REF_ID) TOKENIZER v_txtindex.StringTokenizer(Integer, Varchar) STEMMER  v_txtindex.StemmerCaseInsensitive(v Long Varchar);



SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.NOTIFICATION definition

CREATE TABLE DPWTANBEEH.NOTIFICATION
(
    NOTIFICATION_REC_ID int NOT NULL,
    MOD_REC_ID int NOT NULL,
    NOTIFICATION_DURATION varchar(30),
    NOTIFICATION_FREQUENCE varchar(30),
    TO_EMAIL_ADDRESS varchar(255),
    CC_EMAIL_ADDRESS varchar(255),
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_NOTIFICATION PRIMARY KEY (NOTIFICATION_REC_ID) DISABLED,
    CONSTRAINT CHK_NOTIFICATION_01 CHECK ((NOTIFICATION.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.NOTIFICATION ADD CONSTRAINT FK_NOTIFICATION_MODULE_ID FOREIGN KEY (MOD_REC_ID) references DPWTANBEEH.MODULES (MOD_REC_ID);

CREATE PROJECTION DPWTANBEEH.NOTIFICATION /*+createtype(L)*/ 
(
 NOTIFICATION_REC_ID,
 MOD_REC_ID,
 NOTIFICATION_DURATION,
 NOTIFICATION_FREQUENCE,
 TO_EMAIL_ADDRESS,
 CC_EMAIL_ADDRESS,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT NOTIFICATION.NOTIFICATION_REC_ID,
        NOTIFICATION.MOD_REC_ID,
        NOTIFICATION.NOTIFICATION_DURATION,
        NOTIFICATION.NOTIFICATION_FREQUENCE,
        NOTIFICATION.TO_EMAIL_ADDRESS,
        NOTIFICATION.CC_EMAIL_ADDRESS,
        NOTIFICATION.IS_VALID,
        NOTIFICATION.BIZ_CODE,
        NOTIFICATION.RGN_CODE,
        NOTIFICATION.SRC_SYS,
        NOTIFICATION.CREATED_BY,
        NOTIFICATION.CREATED_DATE,
        NOTIFICATION.MODIFIED_BY,
        NOTIFICATION.MODIFIED_DATE
 FROM DPWTANBEEH.NOTIFICATION
 ORDER BY NOTIFICATION.MOD_REC_ID,
          NOTIFICATION.NOTIFICATION_REC_ID
SEGMENTED BY hash(NOTIFICATION.NOTIFICATION_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.NOTIFICATION_TRIGGER definition

CREATE TABLE DPWTANBEEH.NOTIFICATION_TRIGGER
(
    NOTIFICATION_TRIGGER_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    CAMERA_CODE varchar(30) NOT NULL,
    MODULE_CODE varchar(30) NOT NULL,
    IMAGE_PATH varchar(500),
    RECEIVING_TIME timestamp NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_NOTIFICATION_TRIGGER PRIMARY KEY (NOTIFICATION_TRIGGER_ID) DISABLED,
    CONSTRAINT CHK_NOTIFICATION_TRIGGER_01 CHECK ((NOTIFICATION_TRIGGER.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.NOTIFICATION_TRIGGER ADD CONSTRAINT FK_NOTIFICATION_TRIGGER_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);

CREATE PROJECTION DPWTANBEEH.NOTIFICATION_TRIGGER /*+createtype(L)*/ 
(
 NOTIFICATION_TRIGGER_ID,
 MESSAGE_ID,
 CAMERA_CODE,
 MODULE_CODE,
 IMAGE_PATH,
 RECEIVING_TIME,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT NOTIFICATION_TRIGGER.NOTIFICATION_TRIGGER_ID,
        NOTIFICATION_TRIGGER.MESSAGE_ID,
        NOTIFICATION_TRIGGER.CAMERA_CODE,
        NOTIFICATION_TRIGGER.MODULE_CODE,
        NOTIFICATION_TRIGGER.IMAGE_PATH,
        NOTIFICATION_TRIGGER.RECEIVING_TIME,
        NOTIFICATION_TRIGGER.IS_VALID,
        NOTIFICATION_TRIGGER.BIZ_CODE,
        NOTIFICATION_TRIGGER.RGN_CODE,
        NOTIFICATION_TRIGGER.SRC_SYS,
        NOTIFICATION_TRIGGER.CREATED_BY,
        NOTIFICATION_TRIGGER.CREATED_DATE,
        NOTIFICATION_TRIGGER.MODIFIED_BY,
        NOTIFICATION_TRIGGER.MODIFIED_DATE
 FROM DPWTANBEEH.NOTIFICATION_TRIGGER
 ORDER BY NOTIFICATION_TRIGGER.MESSAGE_ID,
          NOTIFICATION_TRIGGER.NOTIFICATION_TRIGGER_ID
SEGMENTED BY hash(NOTIFICATION_TRIGGER.NOTIFICATION_TRIGGER_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.PPE_DETAILS definition

CREATE TABLE DPWTANBEEH.PPE_DETAILS
(
    PPE_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    NO_PPE int,
    ONLY_HELMET int,
    ONLY_VEST int,
    FULL_PPE int,
    CURRENT_OBJECTS int,
    TOTAL_VIOLATIONS int,
    IS_VALID int NOT NULL DEFAULT 1,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_PPE_DETAILS PRIMARY KEY (PPE_ID) DISABLED,
    CONSTRAINT CHK_PPE_DETAILS_01 CHECK ((PPE_DETAILS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.PPE_DETAILS ADD CONSTRAINT FK_PPE_DETAILS_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);

CREATE PROJECTION DPWTANBEEH.PPE_DETAILS /*+createtype(L)*/ 
(
 PPE_ID,
 MESSAGE_ID,
 NO_PPE,
 ONLY_HELMET,
 ONLY_VEST,
 FULL_PPE,
 CURRENT_OBJECTS,
 TOTAL_VIOLATIONS,
 IS_VALID,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT PPE_DETAILS.PPE_ID,
        PPE_DETAILS.MESSAGE_ID,
        PPE_DETAILS.NO_PPE,
        PPE_DETAILS.ONLY_HELMET,
        PPE_DETAILS.ONLY_VEST,
        PPE_DETAILS.FULL_PPE,
        PPE_DETAILS.CURRENT_OBJECTS,
        PPE_DETAILS.TOTAL_VIOLATIONS,
        PPE_DETAILS.IS_VALID,
        PPE_DETAILS.CREATED_BY,
        PPE_DETAILS.CREATED_DATE,
        PPE_DETAILS.MODIFIED_BY,
        PPE_DETAILS.MODIFIED_DATE
 FROM DPWTANBEEH.PPE_DETAILS
 ORDER BY PPE_DETAILS.MESSAGE_ID,
          PPE_DETAILS.PPE_ID
SEGMENTED BY hash(PPE_DETAILS.PPE_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.TRAFFIC_DETAILS definition

CREATE TABLE DPWTANBEEH.TRAFFIC_DETAILS
(
    DETAIL_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    TRUCK int NOT NULL,
    CAR int NOT NULL,
    PICKUP int NOT NULL,
    BUSE int NOT NULL,
    OTHER int NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_TRAFFIC_DETAILS PRIMARY KEY (DETAIL_ID) DISABLED,
    CONSTRAINT CHK_TRAFFIC_DETAILS_01 CHECK ((TRAFFIC_DETAILS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.TRAFFIC_DETAILS ADD CONSTRAINT FK_TRAFFIC_DETAILS_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);

CREATE PROJECTION DPWTANBEEH.TRAFFIC_DETAILS /*+createtype(L)*/ 
(
 DETAIL_ID,
 MESSAGE_ID,
 TRUCK,
 CAR,
 PICKUP,
 BUSE,
 OTHER,
 IS_VALID,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT TRAFFIC_DETAILS.DETAIL_ID,
        TRAFFIC_DETAILS.MESSAGE_ID,
        TRAFFIC_DETAILS.TRUCK,
        TRAFFIC_DETAILS.CAR,
        TRAFFIC_DETAILS.PICKUP,
        TRAFFIC_DETAILS.BUSE,
        TRAFFIC_DETAILS.OTHER,
        TRAFFIC_DETAILS.IS_VALID,
        TRAFFIC_DETAILS.CREATED_BY,
        TRAFFIC_DETAILS.CREATED_DATE,
        TRAFFIC_DETAILS.MODIFIED_BY,
        TRAFFIC_DETAILS.MODIFIED_DATE
 FROM DPWTANBEEH.TRAFFIC_DETAILS
 ORDER BY TRAFFIC_DETAILS.MESSAGE_ID,
          TRAFFIC_DETAILS.DETAIL_ID
SEGMENTED BY hash(TRAFFIC_DETAILS.DETAIL_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.CAMERA definition

CREATE TABLE DPWTANBEEH.CAMERA
(
    CAM_REC_ID int NOT NULL,
    CAM_ID varchar(30) NOT NULL,
    NAME varchar(30) NOT NULL,
    DESCRIPTION varchar(255),
    HTTP_URI varchar(255),
    RTSP_URI varchar(255),
    FPS_TARGET int NOT NULL DEFAULT 30,
    RCIS_LANE_ID varchar(50),
    LOCATION varchar(255),
    SORT_ORDER int NOT NULL DEFAULT 0,
    CATEGORY_ID int NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    SERVER varchar(255),
    streaming boolean DEFAULT 0,
    CONSTRAINT PK_CAMERA PRIMARY KEY (CAM_REC_ID) DISABLED,
    CONSTRAINT UK_CAMERA_01 UNIQUE (CAM_ID) DISABLED,
    CONSTRAINT CHK_CAMERA_01 CHECK ((CAMERA.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.CAMERA ADD CONSTRAINT FK_CAMERA_01 FOREIGN KEY (CATEGORY_ID) references DPWTANBEEH.CATEGORY (CATEGORY_ID);

CREATE PROJECTION DPWTANBEEH.CAMERA /*+createtype(L)*/ 
(
 CAM_REC_ID,
 CAM_ID,
 NAME,
 DESCRIPTION,
 HTTP_URI,
 RTSP_URI,
 FPS_TARGET,
 RCIS_LANE_ID,
 LOCATION,
 SORT_ORDER,
 CATEGORY_ID,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE,
 SERVER,
 streaming
)
AS
 SELECT CAMERA.CAM_REC_ID,
        CAMERA.CAM_ID,
        CAMERA.NAME,
        CAMERA.DESCRIPTION,
        CAMERA.HTTP_URI,
        CAMERA.RTSP_URI,
        CAMERA.FPS_TARGET,
        CAMERA.RCIS_LANE_ID,
        CAMERA.LOCATION,
        CAMERA.SORT_ORDER,
        CAMERA.CATEGORY_ID,
        CAMERA.IS_VALID,
        CAMERA.BIZ_CODE,
        CAMERA.RGN_CODE,
        CAMERA.SRC_SYS,
        CAMERA.CREATED_BY,
        CAMERA.CREATED_DATE,
        CAMERA.MODIFIED_BY,
        CAMERA.MODIFIED_DATE,
        CAMERA.SERVER,
        CAMERA.streaming
 FROM DPWTANBEEH.CAMERA
 ORDER BY CAMERA.CATEGORY_ID,
          CAMERA.CAM_REC_ID
SEGMENTED BY hash(CAMERA.CAM_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.CAMERA_COLLECTION_MAP definition

CREATE TABLE DPWTANBEEH.CAMERA_COLLECTION_MAP
(
    CAM_REC_ID int NOT NULL,
    COLLECTION_ID int NOT NULL,
    CONSTRAINT PK_CAMERA_COLLECTION_MAP PRIMARY KEY (CAM_REC_ID, COLLECTION_ID) DISABLED
);


ALTER TABLE DPWTANBEEH.CAMERA_COLLECTION_MAP ADD CONSTRAINT FK_CAMERA_COLLECTION_MAP_01 FOREIGN KEY (CAM_REC_ID) references DPWTANBEEH.CAMERA (CAM_REC_ID);
ALTER TABLE DPWTANBEEH.CAMERA_COLLECTION_MAP ADD CONSTRAINT FK_CAMERA_COLLECTION_MAP_02 FOREIGN KEY (COLLECTION_ID) references DPWTANBEEH.COLLECTIONS (COLLECTION_ID);

CREATE PROJECTION DPWTANBEEH.CAMERA_COLLECTION_MAP /*+createtype(L)*/ 
(
 CAM_REC_ID,
 COLLECTION_ID
)
AS
 SELECT CAMERA_COLLECTION_MAP.CAM_REC_ID,
        CAMERA_COLLECTION_MAP.COLLECTION_ID
 FROM DPWTANBEEH.CAMERA_COLLECTION_MAP
 ORDER BY CAMERA_COLLECTION_MAP.COLLECTION_ID,
          CAMERA_COLLECTION_MAP.CAM_REC_ID
SEGMENTED BY hash(CAMERA_COLLECTION_MAP.CAM_REC_ID, CAMERA_COLLECTION_MAP.COLLECTION_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.CAMERA_MODULE_MAP definition

CREATE TABLE DPWTANBEEH.CAMERA_MODULE_MAP
(
    CAM_REC_ID int NOT NULL,
    MOD_REC_ID int NOT NULL,
    CONSTRAINT PK_CAMERA_MODULE_MAP PRIMARY KEY (CAM_REC_ID, MOD_REC_ID) DISABLED
);


ALTER TABLE DPWTANBEEH.CAMERA_MODULE_MAP ADD CONSTRAINT FK_CAMERA_MODULE_MAP_01 FOREIGN KEY (CAM_REC_ID) references DPWTANBEEH.CAMERA (CAM_REC_ID);
ALTER TABLE DPWTANBEEH.CAMERA_MODULE_MAP ADD CONSTRAINT FK_CAMERA_MODULE_MAP_02 FOREIGN KEY (MOD_REC_ID) references DPWTANBEEH.MODULES (MOD_REC_ID);

CREATE PROJECTION DPWTANBEEH.CAMERA_MODULE_MAP /*+createtype(L)*/ 
(
 CAM_REC_ID,
 MOD_REC_ID
)
AS
 SELECT CAMERA_MODULE_MAP.CAM_REC_ID,
        CAMERA_MODULE_MAP.MOD_REC_ID
 FROM DPWTANBEEH.CAMERA_MODULE_MAP
 ORDER BY CAMERA_MODULE_MAP.MOD_REC_ID,
          CAMERA_MODULE_MAP.CAM_REC_ID
SEGMENTED BY hash(CAMERA_MODULE_MAP.CAM_REC_ID, CAMERA_MODULE_MAP.MOD_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.NOTIFICATION_LOG definition

CREATE TABLE DPWTANBEEH.NOTIFICATION_LOG
(
    NOTIFICATION_LOG_ID int NOT NULL,
    MESSAGE_ID int NOT NULL,
    NOTIFICATION_TIME timestamp NOT NULL,
    TO_EMAIL_ADDRESS varchar(255),
    CC_EMAIL_ADDRESS varchar(255),
    MODULE_CODE varchar(20) NOT NULL,
    CAMERA_CODE varchar(20) NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    NOTIFICATION_TRIGGER_ID int,
    CONSTRAINT PK_NOTIFICATION_LOG PRIMARY KEY (NOTIFICATION_LOG_ID) DISABLED,
    CONSTRAINT CHK_NOTIFICATION_LOG_01 CHECK ((NOTIFICATION_LOG.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.NOTIFICATION_LOG ADD CONSTRAINT FK_NOTIFICATION_LOG_01 FOREIGN KEY (MESSAGE_ID) references DPWTANBEEH.MESSAGES (MESSAGE_ID);
ALTER TABLE DPWTANBEEH.NOTIFICATION_LOG ADD CONSTRAINT FK_NOTIFICATION_LOG_02 FOREIGN KEY (NOTIFICATION_TRIGGER_ID) references DPWTANBEEH.NOTIFICATION_TRIGGER (NOTIFICATION_TRIGGER_ID);

CREATE PROJECTION DPWTANBEEH.NOTIFICATION_LOG /*+createtype(L)*/ 
(
 NOTIFICATION_LOG_ID,
 MESSAGE_ID,
 NOTIFICATION_TIME,
 TO_EMAIL_ADDRESS,
 CC_EMAIL_ADDRESS,
 MODULE_CODE,
 CAMERA_CODE,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE,
 NOTIFICATION_TRIGGER_ID
)
AS
 SELECT NOTIFICATION_LOG.NOTIFICATION_LOG_ID,
        NOTIFICATION_LOG.MESSAGE_ID,
        NOTIFICATION_LOG.NOTIFICATION_TIME,
        NOTIFICATION_LOG.TO_EMAIL_ADDRESS,
        NOTIFICATION_LOG.CC_EMAIL_ADDRESS,
        NOTIFICATION_LOG.MODULE_CODE,
        NOTIFICATION_LOG.CAMERA_CODE,
        NOTIFICATION_LOG.IS_VALID,
        NOTIFICATION_LOG.BIZ_CODE,
        NOTIFICATION_LOG.RGN_CODE,
        NOTIFICATION_LOG.SRC_SYS,
        NOTIFICATION_LOG.CREATED_BY,
        NOTIFICATION_LOG.CREATED_DATE,
        NOTIFICATION_LOG.MODIFIED_BY,
        NOTIFICATION_LOG.MODIFIED_DATE,
        NOTIFICATION_LOG.NOTIFICATION_TRIGGER_ID
 FROM DPWTANBEEH.NOTIFICATION_LOG
 ORDER BY NOTIFICATION_LOG.MESSAGE_ID,
          NOTIFICATION_LOG.NOTIFICATION_LOG_ID
SEGMENTED BY hash(NOTIFICATION_LOG.NOTIFICATION_LOG_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);


-- DPWTANBEEH.ROLES_CAMERA_ACCESS definition

CREATE TABLE DPWTANBEEH.ROLES_CAMERA_ACCESS
(
    RCA_REC_ID int NOT NULL,
    ROLE_ID int NOT NULL,
    MODULE_ID int NOT NULL,
    CATEGORY_ID int NOT NULL,
    CAMERA_ID int NOT NULL,
    IS_VALID int NOT NULL DEFAULT 1,
    BIZ_CODE varchar(20) NOT NULL,
    RGN_CODE varchar(20) NOT NULL,
    SRC_SYS varchar(40) NOT NULL,
    CREATED_BY varchar(100) NOT NULL,
    CREATED_DATE timestamp NOT NULL,
    MODIFIED_BY varchar(100),
    MODIFIED_DATE timestamp,
    CONSTRAINT PK_ROLES_CAMERA_ACCESS PRIMARY KEY (RCA_REC_ID) DISABLED,
    CONSTRAINT CHK_ROLES_CAMERA_ACCESS_01 CHECK ((ROLES_CAMERA_ACCESS.IS_VALID = ANY (ARRAY[0, 1]))) ENABLED
);


ALTER TABLE DPWTANBEEH.ROLES_CAMERA_ACCESS ADD CONSTRAINT FK_ROLES_CAMERA_ACCESS_MODULE_ID FOREIGN KEY (MODULE_ID) references DPWTANBEEH.MODULES (MOD_REC_ID);
ALTER TABLE DPWTANBEEH.ROLES_CAMERA_ACCESS ADD CONSTRAINT FK_ROLES_CAMERA_ACCESS_ROLE_ID FOREIGN KEY (ROLE_ID) references DPWTANBEEH.ROLES (ROLE_REC_ID);
ALTER TABLE DPWTANBEEH.ROLES_CAMERA_ACCESS ADD CONSTRAINT FK_ROLES_CAMERA_ACCESS_CATEGORY_ID FOREIGN KEY (CATEGORY_ID) references DPWTANBEEH.CATEGORY (CATEGORY_ID);
ALTER TABLE DPWTANBEEH.ROLES_CAMERA_ACCESS ADD CONSTRAINT FK_ROLES_CAMERA_ACCESS_CAMERA_ID FOREIGN KEY (CAMERA_ID) references DPWTANBEEH.CAMERA (CAM_REC_ID);

CREATE PROJECTION DPWTANBEEH.ROLES_CAMERA_ACCESS /*+createtype(L)*/ 
(
 RCA_REC_ID,
 ROLE_ID,
 MODULE_ID,
 CATEGORY_ID,
 CAMERA_ID,
 IS_VALID,
 BIZ_CODE,
 RGN_CODE,
 SRC_SYS,
 CREATED_BY,
 CREATED_DATE,
 MODIFIED_BY,
 MODIFIED_DATE
)
AS
 SELECT ROLES_CAMERA_ACCESS.RCA_REC_ID,
        ROLES_CAMERA_ACCESS.ROLE_ID,
        ROLES_CAMERA_ACCESS.MODULE_ID,
        ROLES_CAMERA_ACCESS.CATEGORY_ID,
        ROLES_CAMERA_ACCESS.CAMERA_ID,
        ROLES_CAMERA_ACCESS.IS_VALID,
        ROLES_CAMERA_ACCESS.BIZ_CODE,
        ROLES_CAMERA_ACCESS.RGN_CODE,
        ROLES_CAMERA_ACCESS.SRC_SYS,
        ROLES_CAMERA_ACCESS.CREATED_BY,
        ROLES_CAMERA_ACCESS.CREATED_DATE,
        ROLES_CAMERA_ACCESS.MODIFIED_BY,
        ROLES_CAMERA_ACCESS.MODIFIED_DATE
 FROM DPWTANBEEH.ROLES_CAMERA_ACCESS
 ORDER BY ROLES_CAMERA_ACCESS.CAMERA_ID,
          ROLES_CAMERA_ACCESS.CATEGORY_ID,
          ROLES_CAMERA_ACCESS.ROLE_ID,
          ROLES_CAMERA_ACCESS.MODULE_ID,
          ROLES_CAMERA_ACCESS.RCA_REC_ID
SEGMENTED BY hash(ROLES_CAMERA_ACCESS.RCA_REC_ID) ALL NODES KSAFE 1;


SELECT MARK_DESIGN_KSAFE(1);

-- =====================================================
-- END OF SCHEMA DUMP
-- =====================================================

-- INSTRUCTIONS:
-- 1. Replace the example content above with your actual Vertica schema
-- 2. Make sure to include all tables, indexes, constraints, and views
-- 3. Preserve the exact column names, data types, and constraints
-- 4. Include any custom data types or functions if used
-- 5. Save this file after pasting your schema

-- TIPS FOR GENERATING SCHEMA DUMP:
-- 
-- Method 1 - Using vsql command line:
-- vsql -h hostname -p port -U username -d database -c "
-- SELECT 'CREATE TABLE ' || table_schema || '.' || table_name || ' (' || 
--        string_agg(column_name || ' ' || data_type || 
--                   CASE WHEN character_maximum_length IS NOT NULL 
--                        THEN '(' || character_maximum_length || ')' 
--                        ELSE '' END ||
--                   CASE WHEN is_nullable = 'NO' THEN ' NOT NULL' ELSE '' END, ', ') || 
--        ');' as ddl
-- FROM information_schema.columns 
-- WHERE table_schema = 'public' 
-- GROUP BY table_schema, table_name;
-- "
--
-- Method 2 - Using Vertica Management Console (MC):
-- 1. Connect to your Vertica database through MC
-- 2. Navigate to the schema section
-- 3. Export schema as SQL script
--
-- Method 3 - Using DBeaver or similar tool:
-- 1. Connect to Vertica database
-- 2. Right-click on schema -> Generate SQL -> DDL
-- 3. Copy the generated DDL script